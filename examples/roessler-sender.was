# solve roessler attractor and write the instantenoeus state
# to a shared memory object
end_time = 100

VECTOR x SIZE 3
PHASE_SPACE x

CONST a b c            # system parameters
a = 0.2
b = 0.2
c = 5.7

x_0(i) = i+0.123456    # initial conditions as a function of i

# system of equations written in implicit form
0 = -x_dot(1) - x(2) - x(3)
0 = -x_dot(2) + x(1) + a*x(2)
0 = -x_dot(3) + b + x(3)*(x(1) - c)

# write t, dt, done and vector x to shared object "state"
WRITE SHM_OBJECT state t dt done x

# tell the receiver the data is ready through a "sender_ready" semaphore
SEM sender_ready   POST  

# wait until the other read the data end before advancing another step
# if we are on the first step, we write a message to remind the user
# that the other instance of wasora is to be executed at the same time
IF in_static
 PRINT "\# waiting for other end to read my data..." NONEWLINE
ENDIF

SEM receiver_ready WAIT  

IF in_static
 PRINT "ok!"
ENDIF

# note that this input does not produce any output
